#include<stdio.h>
#include<pthread.h>
#include<stdlib.h>
#include<semaphore.h>      // เรียกใช้ Libraly ในการทำงานโดยแก้ปัญหา Critical section 

#define NTHREADS 100


void *thread_function(void *);     
int counter = 0;                            // ประกาศตัวแปร counterเป็นตัวแปรประเภท global

int main(){                                    // การทำงานภายในฟังก์ชั่น main


pthread_t thread_id[NTHREADS];     // ประกาศตัวแปรแบบ thread ชนิด thread โดยประกาศตัวแปรอาเรย์มีจำนวน index ตั้งแต่  0 - 99
int i,j;    

for(i= 0 ; i< NTHREADS;i++)              // การวนลูปค่า  i  ตั้งแต่ 0 -100 ครั้ง

pthread_create(&thread_id[i], NULL, thread_function, NULL);  // เรียกการสร้าง thread โดยจะทำการเรียกใช้งานฟังก์ขั่น thread_function

for (j = 0 ; j< NTHREADS; j++)    // การวนลูปค่า j ตั้งแต่ 0 -100 ครั้ง

pthread_join(thread_id[j], NULL);  // การเรียกใช้ฟังก์ชั่น pthread_join เพื่อนำค่า thread ที่คำนวณได้แต่ละการวนลูปมาทำการ join กันนั่นเอง

printf("Final counter value: %d\n",counter);  //แสดงค่า counter ออกทางหน้าจอ

printf("Finish Program !\n");

return 0;

}


void *thread_function(void *dummyPtr){

int i;

for(i = 0 ; i < 10000; i++)  // การวนลูปค่าตั้งแต่ 0 - 9999 
{

counter++;   // วนลูปบวกค่า counter ตั้งแต่ 0 - 9999 ครั้ง

}
   
pthread_exit(0);   // คืนค่าของ thread ทุกครั้งเมื่อวนลู)ค่า ะhread เสร็จสิ้น

}


*********************************************************************************************************************************************************************************

ส่วนที่เป็น Critical Section คือส่วนของฟังก์ชั่น void *thread_function(void *dummyPtr) ซึ่งนั่นก็คือ บรรทัดที่ 24 นั่นเอง
โดยตัวแปร counter นั่นถูกประกาศเป็นตัวแปรประเภท global นั่นเองซึ่งแปลว่าทุกๆฟังก์ชั่นนนั้นสามารถเรียกใช้ตัวแปรนี้ได้โดยเมื่อเราทำการสร้าง thread นั่นจะทราบดีว่า
การทำงานของ thread นั่นเองจะทำการแชร์ทรัพยาการรร่วมกันซึ่งเมื่อเรานำตัวแปร counter มาใช้งานกับ thread ก็อาจจะทำให้เกิดค่า counter ที่ผิดพลาดได้

โดยจากโปรแกรมนั้นเราได้กำหนดค่าตัวแปร NTHREAD เท่ากับ 100 ซึ่งเมื่อมาดูในการทำงานภายในโปรแกรมแล้วจะประการตัวแปร pthread โดยจะเป็นตัวแปรประเภท array
ซึ่งจากนั้นก็๋จะเรียก pthread_create เพื่อทำการสร้าง thread โดยจำทำการเรียกใช้งานการสร้าง thread วนลูปตามจำนวน NTHREADS นั่นเองซึ่งเมื่อทำการสร้าง thread นั่นก็จะส่งค่า thread ไปยังฟังก์ชั่น thread_function เพื่อวนลูปบวกค่า counter ตามจำนวนเงื่อนไขภายในฟังก์ชั่นนั่นเอง
ซึ่งในการสร้าง thread แต่ละครั้งนั่นก็จะส่งค่าไปยังฟังก์ชั่นทุกๆครั้งเพื่อวนลูปค่า conuter นั่นเองและจากนั้นภายในลูป j ก็จะเรียกใช้การฟังก์ชั่น pthread_join เพื่อนำค่า counter ที่ส่งกลับมาจากฟังก์ชั่นในแต่ละ thread นั่นมาร่วมกันนั่นเองซึ่งจะทำงานวนลู)ไปเรื่อยตามเงื่อนไขและนำค่า thread แต่ละครั้งมาร่วมกัน
จากนั้นก็จะแสดงค่า thread ที่ได้มาแสดงออกทางหน้าจอและจบการทำงานของโปรแกรม

ซึ่งจากการแสดงผลของโปรแกรมนั่นค่า counter ที่แสดงออกมานั่นจะเกิดการผิดพลาดเนื่องจากการทำงานของ thread นั้นมีการ share resource ร่วมกันนั่นเอง
จึงทำให้อาจมีค่าเก่าที่ติดค้างอยู่ในตัวแปร counter จึงทำให้เมื่อนำค่า counter ของแต่ละ thread มาร่วมกันจึงเกิดค่าที่ผิดพลาดได้นั่นเอง

***************************************************************************** End Program **************************************************************************************  
